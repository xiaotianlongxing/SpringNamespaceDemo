<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:sharding="http://shardingsphere.io/schema/shardingsphere/sharding"
	xmlns:orchestration="http://shardingsphere.io/schema/shardingsphere/orchestration"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
    http://shardingsphere.io/schema/shardingsphere/sharding 
    http://shardingsphere.io/schema/shardingsphere/sharding/sharding.xsd
    http://shardingsphere.io/schema/shardingsphere/orchestration
    http://shardingsphere.io/schema/shardingsphere/orchestration/orchestration.xsd">
    
	<!-- 配置整合mybatis过程 -->
	<!-- 1.配置数据库相关参数properties的属性：${url} -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 2.数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<!-- 配置连接池属性 -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

 	<bean id="tableShardingAlgorithmByMonth" class="com.soecode.lyf.service.impl.TableShardingAlgorithmByMonth"></bean>
    <sharding:standard-strategy id="orderTableStrategy" sharding-column="create_time" precise-algorithm-ref="tableShardingAlgorithmByMonth" />
    
<!--     <sharding:key-generator id="itemKeyGenerator" type="SNOWFLAKE" column="book_id" /> -->
    
    <sharding:data-source id="realShardingDatabasesTablesDataSource">
        <sharding:sharding-rule data-source-names="dataSource">
            <sharding:table-rules>
                <sharding:table-rule logic-table="book"  table-strategy-ref="orderTableStrategy"  />
            </sharding:table-rules>
            <sharding:binding-table-rules>
	            <sharding:binding-table-rule logic-tables="book"/>
	        </sharding:binding-table-rules>
        </sharding:sharding-rule>
        
        <sharding:props>
            <prop key="sql.show">true</prop>
        </sharding:props>
    </sharding:data-source>
    
    <orchestration:registry-center id="regCenter" server-lists="127.0.0.1:2182" namespace="orchestration-spring-namespace-book1" operation-timeout-milliseconds="1000" max-retries="3" />
    <orchestration:sharding-data-source id="shardingDatabasesTablesDataSource" registry-center-ref="regCenter" />



	<!-- 3.配置SqlSessionFactory对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="shardingDatabasesTablesDataSource" />
		<!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 扫描entity包 使用别名 -->
		<property name="typeAliasesPackage" value="com.soecode.lyf.entity" />
		<!-- 扫描sql配置文件:mapper需要的xml文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml" />
	</bean>

	<!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 给出需要扫描Dao接口包 -->
		<property name="basePackage" value="com.soecode.lyf.dao" />
	</bean>
</beans>